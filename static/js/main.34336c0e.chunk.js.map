{"version":3,"sources":["API/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","end","userId","fetch","then","response","ok","Error","status","statusText","json","TodoList","chooseUser","selectedUserId","useState","todos","setTodos","filterTodos","setFilterTodos","progress","setProgress","fetchError","setFetchError","useEffect","catch","visibleTodos","filter","todo","title","includes","completed","className","type","value","placeholder","onChange","event","target","map","classNames","checked","readOnly","onClick","id","CurrentUser","clearUser","user","setUser","isLoading","setIsLoading","userFromServer","name","email","phone","App","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"wSAAaA,EAAW,oCAKjB,SAASC,EAAQC,GAA4C,IAA/BC,EAA8B,uDAAJ,GAC7D,OAAOC,MAAM,GAAD,OAAIJ,GAAJ,OAAeE,GAAf,OAAqBC,IAC9BE,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,U,iBCDTC,EAA4B,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,eACtD,EAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAgCJ,mBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRD,GAAc,GDDTtB,EAfQ,UCkBVI,KAAKY,GACLQ,OAAM,kBAAMF,GAAc,QAC5B,IAEH,IAAIG,EAAeV,EAAMW,QAAO,SAAAC,GAAI,OAAIA,EAAKC,MAAMC,SAASZ,MAE5D,OAAQE,GACN,KAAK,EACHM,EAAeA,EAAaC,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKG,aAChD,MACF,KAAK,EACHL,EAAeA,EAAaC,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKG,aAKpD,OACET,EACE,qBACEU,UAAU,kBADZ,0CAMA,sBAAKA,UAAU,WAAf,UACE,wCACA,uBACEC,KAAK,OACLC,MAAOhB,EACPiB,YAAY,SACZC,SAAW,SAAAC,GAAK,OAAIlB,EAAekB,EAAMC,OAAOJ,UAElD,yBACEA,MAAOd,EACPgB,SAAU,SAACC,GAAD,OAAWhB,GAAagB,EAAMC,OAAOJ,QAFjD,UAIE,wBAAQA,MAAO,EAAf,6BACA,wBAAQA,MAAO,EAAf,uBACA,wBAAQA,MAAO,EAAf,4BAGF,qBAAKF,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGN,EAAaa,KAAI,SAAAX,GAAI,OAEpB,qBACEI,UAAWQ,IACT,iBACA,CAAE,6BAA8BZ,EAAKG,WACrC,CAAE,0BAA2BH,EAAKG,YAJtC,UAQE,kCACE,uBACEE,KAAK,WACLQ,QAASb,EAAKG,UACdW,UAAQ,IAEV,4BAAId,EAAKC,WAGX,wBACEG,UAAWQ,IACT,CAAE,kCAAmCZ,EAAKzB,SAAWW,GACrD,UAEFmB,KAAK,SACLU,QAAS,WACP9B,EAAWe,EAAKzB,SAPpB,yBAUYyB,EAAKzB,YArBZyB,EAAKgB,eC9DbC,G,MAA+B,SAAC,GAAmC,IAAjC/B,EAAgC,EAAhCA,eAAgBgC,EAAgB,EAAhBA,UAC7D,EAAwB/B,qBAAxB,mBAAOgC,EAAP,KAAaC,EAAb,KACA,EAAkCjC,oBAAS,GAA3C,mBAAOkC,EAAP,KAAkBC,EAAlB,KACA,EAAoCnC,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAaA,OAXAC,qBAAU,WFML,IAAwBrB,EEL3B+C,GAAa,GACb3B,GAAc,IFIapB,EEHZW,EFIVb,EAlBO,UAkBUE,IEHnBE,MAAK,SAAA8C,GACJD,GAAa,GACbF,EAAQG,MAET1B,OAAM,kBAAMF,GAAc,QAC5B,CAACT,IAEAQ,EAEA,qBACEU,UAAU,QADZ,yKASFiB,GAAaF,EACX,qCACE,sBAAKf,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,wDAAyBe,EAAKH,QAEjE,oBAAIZ,UAAU,oBAAd,SAAmCe,EAAKK,OACxC,mBAAGpB,UAAU,qBAAb,SAAmCe,EAAKM,QACxC,mBAAGrB,UAAU,qBAAb,SAAmCe,EAAKO,WAE1C,wBACEtB,UAAU,6BACVC,KAAK,SACLU,QAASG,EAHX,sBASA,6CCpBOS,EA5BO,WACpB,MAA4CxC,mBAAS,GAArD,mBAAOD,EAAP,KAAuB0C,EAAvB,KAUA,OACE,sBAAKxB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAUnB,WAXG,SAACV,GAClBqD,EAAkBrD,IAUoBW,eAAgBA,MAGpD,qBAAKkB,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGlB,EACC,cAAC,EAAD,CAAaA,eAAgBA,EAAgBgC,UAbrC,WAChBU,EAAkB,MAaR,2BCxBdC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.34336c0e.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nconst todosEnd = '/todos';\nconst userEnd = '/users/';\n\nexport function request(end: string, userId: number | string = '') {\n  return fetch(`${BASE_URL}${end}${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport function getTodos(): Promise<Todo[]> {\n  return request(todosEnd);\n}\n\nexport function getCurrentUser(userId: number): Promise<User> {\n  return request(userEnd, userId);\n}\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getTodos } from '../../API/api';\nimport './TodoList.scss';\n\ntype Props = {\n  chooseUser: (userId: number) => void,\n  selectedUserId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({ chooseUser, selectedUserId }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterTodos, setFilterTodos] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [fetchError, setFetchError] = useState(false);\n\n  useEffect(() => {\n    setFetchError(false);\n    getTodos()\n      .then(setTodos)\n      .catch(() => setFetchError(true));\n  }, []);\n\n  let visibleTodos = todos.filter(todo => todo.title.includes(filterTodos));\n\n  switch (progress) {\n    case 1:\n      visibleTodos = visibleTodos.filter(todo => todo.completed === true);\n      break;\n    case 2:\n      visibleTodos = visibleTodos.filter(todo => todo.completed === false);\n      break;\n    default: break;\n  }\n\n  return (\n    fetchError ? (\n      <div\n        className=\"TodoList__Error\"\n      >\n        the server is not responding\n      </div>\n    ) : (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          type=\"text\"\n          value={filterTodos}\n          placeholder=\"Search\"\n          onChange={(event => setFilterTodos(event.target.value))}\n        />\n        <select\n          value={progress}\n          onChange={(event) => setProgress(+event.target.value)}\n        >\n          <option value={0}>Choose progress</option>\n          <option value={1}>completed</option>\n          <option value={2}>in progress</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    { 'TodoList__user-button--selected': todo.userId === selectedUserId },\n                    'button',\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    chooseUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    )\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getCurrentUser } from '../../API/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number,\n  clearUser: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ selectedUserId, clearUser }) => {\n  const [user, setUser] = useState<User>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchError, setFetchError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setFetchError(false);\n    getCurrentUser(selectedUserId)\n      .then(userFromServer => {\n        setIsLoading(true);\n        setUser(userFromServer);\n      })\n      .catch(() => setFetchError(true));\n  }, [selectedUserId]);\n\n  if (fetchError) {\n    return (\n      <div\n        className=\"Error\"\n      >\n        Неверный адрес пользователя!!!\n      </div>\n    );\n  }\n\n  return (\n    isLoading && user ? (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n        </div>\n        <button\n          className=\"CurrentUser__button button\"\n          type=\"button\"\n          onClick={clearUser}\n        >\n          clear\n        </button>\n      </>\n    )\n      : <p>Loading...</p>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const chooseUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  const clearUser = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList chooseUser={chooseUser} selectedUserId={selectedUserId} />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser selectedUserId={selectedUserId} clearUser={clearUser} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}